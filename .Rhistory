library(h2o)
library(h2o)
install.packages("h2o")
library(h2o)
h2o.init()
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-wheeler/2/R")
library(h2o)
h2o.init()
library(h2o)
h2o.init()
library(h2o)
install.packages("h2o")
library(h2o)
library(h2o)
install.packages("h2o", type="source", repos="https://h2o-release.s3.amazonaws.com/h2o/master/3978/R")
library(h2o)
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
install.packages("h2o", type="source", repos="https://h2o-release.s3.amazonaws.com/h2o/master/3978/R")
library(h2o)
library(h2o)
library(h2o)
h2o.init()
library(h2o)
h2o.init()
library(rJava)
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
install.packages("rJava")
library(rJava)
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Next, we download packages that H2O depends on.
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-wheeler/2/R")
library(h2o)
h2o.init()
h2o.init()
h2o.removeAll() # Clean slate - just in case the cluster was already running
train <- h2o.importFile(path = normalizePath("/Users/yaman/Desktop/homework_48/train_data.csv"))
train <- as.h2o(x=train, destination_frame= "train")
test <- h2o.importFile(path = normalizePath("/Users/yaman/Desktop/homework_48/test_data.csv"))
train <- as.h2o(x=train, destination_frame= "train")
test <- as.h2o(x=test, destination_frame= "test")
train[1:5,]   ## rows 1-5, all columns
train[1:5, 1]   ## rows 1-5, all columns
tlabels <- h2o.importFile(path = normalizePath("/Users/yaman/Desktop/homework_48/train_labels.csv"))
library(h2o)
h2o.init()
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-wolpert/9/R")
# Finally, let's load H2O and start up an H2O cluster
library(h2o)
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
install.packages("h2o", type="source", repos="https://h2o-release.s3.amazonaws.com/h2o/master/3978/R")
h2o.init()
library(h2o)
library(h2o)
h2o.init()
library(h2o)
getwd()
setwd("/Users/yaman/IST/ARL")
setwd("/Users/yaman/Desktop/IST/ARL")
getwd()
library(ggplot2)
library(GGally)
library(vcd)
library(data.table)
#library(gmodels)
library(Hmisc)
library(corrplot)
library(magrittr)
library(reshape2)
library(scales)
library(readr)
library(car)
library(rgl)
library(nFactors)
library(cluster)
library(pvclust)
library(plyr)
library(PerformanceAnalytics)
library(gplots)
library(factoextra)
library(class)
library(graphics)
library(NbClust)
#library(ComplexHeatmap)
library(arules)
library(arulesViz)
clus_data <- read.csv("clus_data.csv")
clus_data <- data.frame(clus_data)
str(clus_data)
cols <- c(7:20, 26:35, 37:46) # Selecting the numerical columns
clus_data_selected <- clus_data[, cols]
numericColumns <- sapply(clus_data, is.numeric)
str(clus_data_selected)
# and a scaled version of that with NA's removed
clus_data_scaled <- scale(na.omit(clus_data_selected))
source('~/Desktop/IST/ARL/h2o.R', echo=TRUE)
# Numerical columns starting with "INV".
qData <- clus_data[, grepl("^INV",colnames(clus_data)) & numericColumns ]
clus_data <- cbind(clus_data, apply(qData, 2, function(x) {x[x == 1 |x == 2] <- "disagree"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "agree"; x}))
# Numerical columns starting with "USER".
qData2 <- suppressWarnings(clus_data[, grepl("^USER",colnames(clus_data)) & numericColumns ])
clus_data <- cbind(clus_data, apply(qData2, 2, function(x) {x[x == 1 |x == 2] <- "disagree"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "agree"; x}))
# Numerical columns starting with "INF.".
qData3 <- suppressWarnings(clus_data[, grepl("^INF",colnames(clus_data)) & numericColumns ])
clus_data <- cbind(clus_data, apply(qData3, 2, function(x) {x[x == 1 |x == 2] <- "disagree"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "agree"; x}))
# Numerical columns starting with "X3.3.".
qData4 <- suppressWarnings(clus_data[, grepl("^X3.3",colnames(clus_data)) & numericColumns ])
clus_data <- cbind(clus_data, apply(qData4, 2, function(x) {x[x == 1 |x == 2] <- "disagree"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "agree"; x}))
# Numerical columns starting with "X3.3.".
qData5 <- suppressWarnings(clus_data[, grepl("^M",colnames(clus_data)) & numericColumns ])
clus_data <- cbind(clus_data, apply(qData5, 2, function(x) {x[x == 1 |x == 2] <- "not often"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "often"; x}))
# Worktime":
WORKTIM <- suppressWarnings(car::recode(clus_data$worktime,
"c(2,3,4,5,6,7,8,9,10,11)='1 year'; c(12, 24, 36) ='1-3 year'; c(48, 60)='4-5 year'; c(72, 84, 96, 108)='6-9 year'; c(120, 132)='11-12 year'"))
WORKTIM  <- data.frame(WORKTIM)
clus_data <- cbind(clus_data, WORKTIM)
View(clus_data)
#clus_data <- read.csv("factors.csv")
clus_data <- clus_data[, -1]
is.fact <- sapply(clus_data, is.factor)
factors.df <- clus_data[, is.fact]
str(factors.df) # selecting only the factors
# forgot what the below is doing
rmcols <- rev(seq(1,ncol(clus_data))[sapply(clus_data, is.numeric)])
for (i in rmcols) clus_data[[i]] <- NULL
colnames(clus_data)
class(clus_data)
str(clus_data)
cols <- c(4, 7:9, 10, 12:15, 20, 21, 23, 25, 35, 43, 44, 36, 37)
trial <- factors.df[, cols]
trial_non <- na.omit(trial)
str(trial_non)
# First a sort function
setMethod("sort", signature(x = "associations"),
function (x, decreasing = TRUE, na.last = NA, by = "support", ...) {
q <- quality(x)
q <- q[, pmatch(by, colnames(q)), drop = FALSE]
if(is.null(q)) stop("Unknown interest measure to sort by.")
if(length(x) == 0) return(x)
x[do.call(order, c(q, list(na.last = na.last, decreasing = decreasing)))]
})
rules = apriori(trial, parameter=list(support=0.05, confidence=0.5, minlen=3, maxlen=36, maxtime=150), appearance = list( rhs=c("condexp=Yes, actively"), default = "lhs"))
#, appearance = list( rhs=c("X3.3B.1=agree"), default = "lhs")
#, appearance = list(lhs=c("INVE.1=agree"))
sorted_mult <- sort(rules, decreasing = TRUE, by=c("confidence", "count"))
inspect(sorted_mult[1:100])
rules
topRules <- rules[1:10]
inspect(rules[1:15])
top.confidence <- sort(rules, decreasing = TRUE, na.last = NA, by = "confidence")
inspect(top.confidence[1:40])
top.lift <- sort(rules, decreasing = TRUE, na.last = NA, by = "lift")
inspect(top.lift[1:40])
plot(sorted_mult[1:7], method = "graph")
plot(topRules, method = "grouped")
# First a sort function
setMethod("sort", signature(x = "associations"),
function (x, decreasing = TRUE, na.last = NA, by = "support", ...) {
q <- quality(x)
q <- q[, pmatch(by, colnames(q)), drop = FALSE]
if(is.null(q)) stop("Unknown interest measure to sort by.")
if(length(x) == 0) return(x)
x[do.call(order, c(q, list(na.last = na.last, decreasing = decreasing)))]
})
rules = apriori(trial, parameter=list(support=0.05, confidence=0.5, minlen=3, maxlen=36, maxtime=150), appearance = list( rhs=c("condexp=Yes, actively"), default = "lhs"))
#, appearance = list( rhs=c("X3.3B.1=agree"), default = "lhs")
#, appearance = list(lhs=c("INVE.1=agree"))
sorted_mult <- sort(rules, decreasing = TRUE, by=c("confidence", "count"))
inspect(sorted_mult[1:100])
rules
topRules <- rules[1:10]
inspect(rules[1:15])
top.confidence <- sort(rules, decreasing = TRUE, na.last = NA, by = "confidence")
inspect(top.confidence[1:40])
top.lift <- sort(rules, decreasing = TRUE, na.last = NA, by = "lift")
inspect(top.lift[1:40])
plot(sorted_mult[1:7], method = "graph")
plot(topRules, method = "grouped")
setMethod("sort", signature(x = "associations"),
function (x, decreasing = TRUE, na.last = NA, by = "support", ...) {
q <- quality(x)
q <- q[, pmatch(by, colnames(q)), drop = FALSE]
if(is.null(q)) stop("Unknown interest measure to sort by.")
if(length(x) == 0) return(x)
x[do.call(order, c(q, list(na.last = na.last, decreasing = decreasing)))]
})
rules = apriori(trial, parameter=list(support=0.05, confidence=0.5, minlen=3, maxlen=36, maxtime=150), appearance = list( rhs=c("condexp=Yes, actively"), default = "lhs"))
#, appearance = list( rhs=c("X3.3B.1=agree"), default = "lhs")
#, appearance = list(lhs=c("INVE.1=agree"))
sorted_mult <- sort(rules, decreasing = TRUE, by=c("confidence", "count"))
inspect(sorted_mult[1:100])
setMethod("sort", signature(x = "associations"),
function (x, decreasing = TRUE, na.last = NA, by = "support", ...) {
q <- quality(x)
q <- q[, pmatch(by, colnames(q)), drop = FALSE]
if(is.null(q)) stop("Unknown interest measure to sort by.")
if(length(x) == 0) return(x)
x[do.call(order, c(q, list(na.last = na.last, decreasing = decreasing)))]
})
rules = apriori(trial, parameter=list(support=0.05, confidence=0.5, minlen=3, maxlen=36, maxtime=150), appearance = list( rhs=c("X3.3C.1 = agree"), default = "lhs"))
#clus_data <- read.csv("factors.csv")
clus_data <- clus_data[, -1]
is.fact <- sapply(clus_data, is.factor)
factors.df <- clus_data[, is.fact]
str(factors.df) # selecting only the factors
# forgot what the below is doing
rmcols <- rev(seq(1,ncol(clus_data))[sapply(clus_data, is.numeric)])
for (i in rmcols) clus_data[[i]] <- NULL
colnames(clus_data)
class(clus_data)
str(clus_data)
cols <- c(4, 7:9, 10, 12:15, 20, 21, 23, 25, 35, 43, 44, 36, 37)
trial <- factors.df[, cols]
clus_data <- read.csv("clus_data.csv")
clus_data <- data.frame(clus_data)
str(clus_data)
cols <- c(7:20, 26:35, 37:46) # Selecting the numerical columns
clus_data_selected <- clus_data[, cols]
numericColumns <- sapply(clus_data, is.numeric)
str(clus_data_selected)
# and a scaled version of that with NA's removed
clus_data_scaled <- scale(na.omit(clus_data_selected))
# Numerical columns starting with "INV".
qData <- clus_data[, grepl("^INV",colnames(clus_data)) & numericColumns ]
clus_data <- cbind(clus_data, apply(qData, 2, function(x) {x[x == 1 |x == 2] <- "disagree"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "agree"; x}))
# Numerical columns starting with "USER".
qData2 <- suppressWarnings(clus_data[, grepl("^USER",colnames(clus_data)) & numericColumns ])
clus_data <- cbind(clus_data, apply(qData2, 2, function(x) {x[x == 1 |x == 2] <- "disagree"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "agree"; x}))
# Numerical columns starting with "INF.".
qData3 <- suppressWarnings(clus_data[, grepl("^INF",colnames(clus_data)) & numericColumns ])
clus_data <- cbind(clus_data, apply(qData3, 2, function(x) {x[x == 1 |x == 2] <- "disagree"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "agree"; x}))
# Numerical columns starting with "X3.3.".
qData4 <- suppressWarnings(clus_data[, grepl("^X3.3",colnames(clus_data)) & numericColumns ])
clus_data <- cbind(clus_data, apply(qData4, 2, function(x) {x[x == 1 |x == 2] <- "disagree"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "agree"; x}))
# Numerical columns starting with "X3.3.".
qData5 <- suppressWarnings(clus_data[, grepl("^M",colnames(clus_data)) & numericColumns ])
clus_data <- cbind(clus_data, apply(qData5, 2, function(x) {x[x == 1 |x == 2] <- "not often"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "often"; x}))
# Worktime":
WORKTIM <- suppressWarnings(car::recode(clus_data$worktime,
"c(2,3,4,5,6,7,8,9,10,11)='1 year'; c(12, 24, 36) ='1-3 year'; c(48, 60)='4-5 year'; c(72, 84, 96, 108)='6-9 year'; c(120, 132)='11-12 year'"))
WORKTIM  <- data.frame(WORKTIM)
clus_data <- cbind(clus_data, WORKTIM)
#clus_data <- read.csv("factors.csv")
clus_data <- clus_data[, -1]
is.fact <- sapply(clus_data, is.factor)
factors.df <- clus_data[, is.fact]
str(factors.df) # selecting only the factors
# forgot what the below is doing
rmcols <- rev(seq(1,ncol(clus_data))[sapply(clus_data, is.numeric)])
for (i in rmcols) clus_data[[i]] <- NULL
colnames(clus_data)
class(clus_data)
str(clus_data)
cols <- c(4, 7:9, 10, 12:15, 20, 21, 23, 25, 35, 43, 44, 36, 37)
trial <- factors.df[, cols]
trial_non <- na.omit(trial)
str(trial_non)
# First a sort function
setMethod("sort", signature(x = "associations"),
function (x, decreasing = TRUE, na.last = NA, by = "support", ...) {
q <- quality(x)
q <- q[, pmatch(by, colnames(q)), drop = FALSE]
if(is.null(q)) stop("Unknown interest measure to sort by.")
if(length(x) == 0) return(x)
x[do.call(order, c(q, list(na.last = na.last, decreasing = decreasing)))]
})
rules = apriori(trial, parameter=list(support=0.05, confidence=0.5, minlen=3, maxlen=36, maxtime=150), appearance = list( rhs=c("X3.3C.1 = agree"), default = "lhs"))
View(clus_data)
cols <- c(4, 7:9, 10, 12:15, 20, 21, 23, 25, 35, 36, 43, 44, 36, 37)
trial <- factors.df[, cols]
trial_non <- na.omit(trial)
str(trial_non)
setMethod("sort", signature(x = "associations"),
function (x, decreasing = TRUE, na.last = NA, by = "support", ...) {
q <- quality(x)
q <- q[, pmatch(by, colnames(q)), drop = FALSE]
if(is.null(q)) stop("Unknown interest measure to sort by.")
if(length(x) == 0) return(x)
x[do.call(order, c(q, list(na.last = na.last, decreasing = decreasing)))]
})
rules = apriori(trial, parameter=list(support=0.05, confidence=0.5, minlen=3, maxlen=36, maxtime=150), appearance = list( rhs=c("X3.3C.1 = agree"), default = "lhs"))
#clus_data <- read.csv("factors.csv")
clus_data <- clus_data[, -1]
is.fact <- sapply(clus_data, is.factor)
factors.df <- clus_data[, is.fact]
str(factors.df) # selecting only the factors
# forgot what the below is doing
rmcols <- rev(seq(1,ncol(clus_data))[sapply(clus_data, is.numeric)])
for (i in rmcols) clus_data[[i]] <- NULL
colnames(clus_data)
class(clus_data)
str(clus_data)
cols <- c(4, 7:9, 10, 12:15, 20, 21, 23, 25, 35, 43, 44, 36, 37)
trial <- factors.df[, cols]
clus_data <- read.csv("clus_data.csv")
clus_data <- data.frame(clus_data)
str(clus_data)
cols <- c(7:20, 26:35, 37:46) # Selecting the numerical columns
clus_data_selected <- clus_data[, cols]
numericColumns <- sapply(clus_data, is.numeric)
str(clus_data_selected)
# and a scaled version of that with NA's removed
clus_data_scaled <- scale(na.omit(clus_data_selected))
# Numerical columns starting with "INV".
qData <- clus_data[, grepl("^INV",colnames(clus_data)) & numericColumns ]
clus_data <- cbind(clus_data, apply(qData, 2, function(x) {x[x == 1 |x == 2] <- "disagree"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "agree"; x}))
# Numerical columns starting with "USER".
qData2 <- suppressWarnings(clus_data[, grepl("^USER",colnames(clus_data)) & numericColumns ])
clus_data <- cbind(clus_data, apply(qData2, 2, function(x) {x[x == 1 |x == 2] <- "disagree"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "agree"; x}))
# Numerical columns starting with "INF.".
qData3 <- suppressWarnings(clus_data[, grepl("^INF",colnames(clus_data)) & numericColumns ])
clus_data <- cbind(clus_data, apply(qData3, 2, function(x) {x[x == 1 |x == 2] <- "disagree"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "agree"; x}))
# Numerical columns starting with "X3.3.".
qData4 <- suppressWarnings(clus_data[, grepl("^X3.3",colnames(clus_data)) & numericColumns ])
clus_data <- cbind(clus_data, apply(qData4, 2, function(x) {x[x == 1 |x == 2] <- "disagree"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "agree"; x}))
# Numerical columns starting with "X3.3.".
qData5 <- suppressWarnings(clus_data[, grepl("^M",colnames(clus_data)) & numericColumns ])
clus_data <- cbind(clus_data, apply(qData5, 2, function(x) {x[x == 1 |x == 2] <- "not often"; x[x == 3] <- "indecisive" ; x[x == 4 |x == 5] <- "often"; x}))
# Worktime":
WORKTIM <- suppressWarnings(car::recode(clus_data$worktime,
"c(2,3,4,5,6,7,8,9,10,11)='1 year'; c(12, 24, 36) ='1-3 year'; c(48, 60)='4-5 year'; c(72, 84, 96, 108)='6-9 year'; c(120, 132)='11-12 year'"))
WORKTIM  <- data.frame(WORKTIM)
clus_data <- cbind(clus_data, WORKTIM)
#clus_data <- read.csv("factors.csv")
clus_data <- clus_data[, -1]
is.fact <- sapply(clus_data, is.factor)
factors.df <- clus_data[, is.fact]
str(factors.df) # selecting only the factors
# forgot what the below is doing
rmcols <- rev(seq(1,ncol(clus_data))[sapply(clus_data, is.numeric)])
for (i in rmcols) clus_data[[i]] <- NULL
colnames(clus_data)
class(clus_data)
str(clus_data)
cols <- c(4, 7:9, 10, 12:15, 20, 21, 23, 25, 35, 43, 44, 36, 37)
trial <- factors.df[, cols]
trial_non <- na.omit(trial)
str(trial_non)
setMethod("sort", signature(x = "associations"),
function (x, decreasing = TRUE, na.last = NA, by = "support", ...) {
q <- quality(x)
q <- q[, pmatch(by, colnames(q)), drop = FALSE]
if(is.null(q)) stop("Unknown interest measure to sort by.")
if(length(x) == 0) return(x)
x[do.call(order, c(q, list(na.last = na.last, decreasing = decreasing)))]
})
rules = apriori(trial, parameter=list(support=0.05, confidence=0.5, minlen=3, maxlen=36, maxtime=150), appearance = list( rhs=c("X3.3D.1=agree"), default = "lhs"))
rules = apriori(trial, parameter=list(support=0.05, confidence=0.5, minlen=3, maxlen=36, maxtime=150), appearance = list( rhs=c("X3.3C.1=agree"), default = "lhs"))
sorted_mult <- sort(rules, decreasing = TRUE, by=c("confidence", "count"))
inspect(sorted_mult[1:100])
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-xia/1/R")
library(h2o)
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
h2o.init()
library(h2o)
library(h2o)
install.packages("h2o")
library(h2o)
h2o.init()
library(h2o)
